<section class="text-level-3">
  <p class="text-level-1">
    A safer option : Run the <strong>entire suite</strong> with
    <strong>different viewports</strong>
  </p>

  <div class="mt-100 fragment">
    <p>
      In <code>playwright.config.ts</code>, uncomment the projects for the
      phones you want to verify
    </p>

    <if-pw>
      <pre class="mt-50"><code class="typescript">
        import { defineConfig, devices } from '@playwright/test';

        export default defineConfig({
          projects: [
            {
              name: 'chromium',
              use: { ...devices['Desktop Chrome'] },
            },
            {
              name: 'firefox',
              use: { ...devices['Desktop Firefox'] },
            },
            {
              name: 'Mobile Chrome',
              use: { ...devices['Pixel 5'] },
            },
            {
              name: 'Mobile Safari',
              use: { ...devices['iPhone 12'] },
            },
          ],
        });
      </code></pre>
    </if-pw>
    <if-cy>
      <pre><code class="ini">
        # .env.mobile
        CYPRESS_VIEWPORT_WIDTH=375
        CYPRESS_VIEWPORT_HEIGHT=667
      </code></pre>

      <pre class="mt-150" style="width: 100%">
        <code data-trim class="json" data-line-numbers="1,6">
          // package.json
          ...
          "scripts": {
          ...
          "cy:open:e2e": "dotenvx run -f .env.e2e -- npx cypress open --e2e --browser chromium",
          "cy:open:e2e:mobile": "dotenvx run -f .env.e2e -f .env.mobile -- npx cypress open --e2e --browser chromium",
          ...
          },
          ...
        </code>
      </pre>
    </if-cy>
  </div>

  <if-pw>
    <small class="fragment mt-100">
      More on configuring <strong>projects</strong>:<br />
      <span>https://playwright.dev/docs/test-projects</span>
    </small>
  </if-pw>
  <if-cy>
    <small class="fragment mt-200">
      More on configuring the <strong>viewport</strong>:<br />
      <span> https://docs.cypress.io/api/commands/viewport </span>
    </small>
  </if-cy>
</section>

<section class="text-level-2">
  <p class="text-level-1">
    Some tests must be adapted for a specific device
  </p>
  <if-pw>
    <p class="mt-100">
      Inject <code>isMobile</code> so you can adapt your test
    </p>
    <pre class="fragment"><code class="ts">
      test('MyTest', async ({ page, isMobile }) => {
        // ...
        if (isMobile) {
          await page.swipe(".row:nth-child(2)", { direction: 'left' });
        } else {
          await page.locator(".row:nth-child(2) button.delete").click();
        }
        // ...
      })
    </code></pre>

    <small class="mt-300r fragment">
      <code>swipe()</code> is still experimental, but can be replaced by mouse events
      <ul>
        <li>https://www.restack.io/p/playwright-answer-mobile-testing-guide</li>
        <li>https://playwright.dev/docs/api/class-androidinput#android-input-swipe</li>
        <li>https://dpnkr.in/blog/swipe-playwright-testing</li>
      </ul>
    </small>

  </if-pw>


  <if-cy>
    <div class="fragment">
      <p class="mt-100">
        Create an <code>isMobile()</code> function to execute different commands
      </p>
      <pre class="mt-50"><code class="ts">
        // cypress/support/utils.ts
        export const isMobile = () => {
            return (
              Cypress.config("viewportWidth") &lt; 500
            )
          } 
      </code></pre>

      <pre><code class="ts">
        // cypress/e2e/feature.spec.ts
        import { isMobile } from './../../support/utils';
        
        // ...
        if (isMobile()) {
          cy.get(".row").eq(2).realSwipe("toLeft");
        } else {
          cy.get(".row button.delete").eq(2).click();
        }
        // ...
      </code></pre>
    </div>

    <small class="mt-150r fragment">
      <code>realSwipe()</code> comes with the plugin
      <strong>cypress-real-events</strong>:
      <span>
        https://github.com/dmtrKovalenko/cypress-real-events
      </span>
    </small>

  </if-cy>
</section>
